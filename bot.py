import os
import asyncio
import logging
import json
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo


from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

import gspread
from dotenv import load_dotenv


load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SHEET_ID = os.getenv("SHEET_ID")
GOOGLE_CREDS_PATH = os.getenv("GOOGLE_APPLICATION_CREDENTIALS", "google-credentials.json")
TARGET_CHAT_ID = int(os.getenv("TARGET_CHAT_ID", "0"))  # -100xxxxxxxxxx
OWNER_ID = int(os.getenv("OWNER_ID", "0"))
TIMEZONE = os.getenv("TIMEZONE", "Europe/Moscow")
INVITE_TTL_DAYS = int(os.getenv("INVITE_TTL_DAYS", "7"))

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is required")


try:
    creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
    if creds_json:
        creds = json.loads(creds_json)
        gc = gspread.service_account_from_dict(creds)
        sh = gc.open_by_key(SHEET_ID)
        ws = sh.sheet1
    else:
        gc = None
        ws = None

    sh = gc.open_by_key(SHEET_ID)
    ws = sh.sheet1
except Exception as e:
    logging.warning(f"Google Sheets init issue: {e}")
    ws = None


QUESTIONS = [
    {
        "text": "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, –∫–∞–∫–∏–µ –º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –æ—Ç–∫—Ä—ã—Ç—å –±–∏–∑–Ω–µ—Å?",
        "options": ["–Ω–µ –∑–Ω–∞—é", "—Å–ª—ã—à–∞–ª, –Ω–æ –Ω–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å", "–∑–Ω–∞—é –Ω–µ—Å–∫–æ–ª—å–∫–æ", "—Ö–æ—Ä–æ—à–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—é—Å—å"],
    },
    {
        "text": "–ü–æ–Ω–∏–º–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ —Ç–∞–∫–æ–µ –∞–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –±–∏–∑–Ω–µ—Å-–∏–Ω–∫—É–±–∞—Ç–æ—Ä?",
        "options": ["–Ω–µ—Ç", "—á—Ç–æ-—Ç–æ —Å–ª—ã—à–∞–ª", "–∑–Ω–∞—é –≤ –æ–±—â–∏—Ö —á–µ—Ä—Ç–∞—Ö", "–º–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å –¥—Ä—É–≥–∏–º"],
    },
    {
        "text": "–ü–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ª–∏ –≤—ã –≥—Ä–∞–Ω—Ç–∞–º–∏, —Å—É–±—Å–∏–¥–∏—è–º–∏ –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤?",
        "options": ["–Ω–µ—Ç –∏ –Ω–µ –∑–Ω–∞—é –∫–∞–∫", "–Ω–µ—Ç, –Ω–æ –∑–Ω–∞—é –≥–¥–µ –∏—Å–∫–∞—Ç—å", "–¥–∞, –ø—Ä–æ–±–æ–≤–∞–ª(–∞)", "–¥–∞, —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞)"],
    },
    {
        "text": "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ—Ç–µ—Å—å –≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞?",
        "options": ["—Å–æ–≤—Å–µ–º –Ω–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—é—Å—å", "–∑–Ω–∞—é —Ç–æ–ª—å–∫–æ –ø–æ —Å–ª—É—Ö–∞–º", "–∑–Ω–∞—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–æ—â–∞–¥–æ–∫", "–∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É—é"],
    },
    {
        "text": "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞?",
        "options": ["–Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é", "–±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è", "—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å", "–≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"],
    },
]

class TestStates(StatesGroup):
    waiting_contact = State()
    in_test = State()


def contact_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def options_kb(q_index: int) -> InlineKeyboardMarkup:
    buttons = []
    for i, opt in enumerate(QUESTIONS[q_index]["options"]):
        buttons.append([InlineKeyboardButton(text=opt, callback_data=f"ans:{q_index}:{i}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def ask_question(message: Message, state: FSMContext, q_index: int):
    await state.update_data(current_q=q_index)
    q = QUESTIONS[q_index]
    await message.answer(f"–í–æ–ø—Ä–æ—Å {q_index+1}/{len(QUESTIONS)}\n\n{q['text']}", reply_markup=options_kb(q_index))

async def save_row_to_sheet(row: list):
    if ws is None:
        logging.error("Google Sheets not configured; skipping append_row")
        return
    try:
        ws.append_row(row, value_input_option="USER_ENTERED")
    except Exception as e:
        logging.exception(f"Failed to append row: {e}")

async def create_single_use_invite(bot: Bot, user_id: int) -> str:
    if TARGET_CHAT_ID == 0:
        return "(–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω TARGET_CHAT_ID)"
    try:
        expire_date = int((datetime.now().astimezone(ZoneInfo("UTC")) + timedelta(days=INVITE_TTL_DAYS)).timestamp())
        link = await bot.create_chat_invite_link(
            chat_id=TARGET_CHAT_ID,
            name=f"bp-{user_id}-{datetime.now().strftime('%Y%m%d')}",
            expire_date=expire_date,
            member_limit=1
        )
        return link.invite_link
    except Exception as e:
        logging.exception(f"Invite link error: {e}")
        return ""


async def on_start(message: Message, state: FSMContext):
    await state.clear()
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ ¬´–ë–∏–∑–Ω–µ—Å-–ü–æ–≥—Ä—É–∂–µ–Ω–∏–µ¬ª.\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–æ–º—å—é–Ω–∏—Ç–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 5 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
    )
    await message.answer(text, reply_markup=contact_kb())
    await state.set_state(TestStates.waiting_contact)

async def on_contact(message: Message, state: FSMContext):
    if not message.contact:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç.", reply_markup=contact_kb())
        return

    await state.update_data(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        phone=message.contact.phone_number,
        answers=[None]*len(QUESTIONS)
    )
    await state.set_state(TestStates.in_test)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç.", reply_markup=ReplyKeyboardRemove())
    await ask_question(message, state, 0)

async def on_answer(call: CallbackQuery, state: FSMContext, bot: Bot):
    if not await state.get_state() == TestStates.in_test:
        await call.answer()
        return

    try:
        _prefix, q_str, opt_str = call.data.split(":")
        q_index = int(q_str)
        opt_index = int(opt_str)
    except Exception:
        await call.answer()
        return

    data = await state.get_data()
    answers = data.get("answers", [None]*len(QUESTIONS))
    answers[q_index] = QUESTIONS[q_index]["options"][opt_index]
    await state.update_data(answers=answers)

    await call.answer("–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

    next_q = q_index + 1
    if next_q < len(QUESTIONS):
        await call.message.answer("–û–∫!")
        await ask_question(call.message, state, next_q)
    else:
        tz = ZoneInfo(TIMEZONE)
        timestamp = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S %Z")
        row = [
            timestamp,
            data.get("user_id"),
            data.get("username"),
            data.get("first_name"),
            data.get("last_name"),
            data.get("phone"),
        ] + answers

        await save_row_to_sheet(row)

        group_link = "https://t.me/business_immersion"
        await call.message.answer(
            "–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∑–∞–∫—Ä—ã—Ç–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏:\n" + group_link
        )
        await state.clear()


async def whoami(message: Message):
    await message.answer(f"–í–∞—à user_id: {message.from_user.id}")

async def whereami(message: Message):
    if message.from_user.id != OWNER_ID:
        return
    await message.answer(f"chat_id: {message.chat.id}")

async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(on_start, CommandStart())
    dp.message.register(whoami, Command("whoami"))
    dp.message.register(whereami, Command("whereami"))
    dp.message.register(on_contact, F.contact, TestStates.waiting_contact)

    dp.callback_query.register(on_answer, F.data.startswith("ans:"), TestStates.in_test)

    await dp.start_polling(bot, allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    asyncio.run(main())
